package br.usp.inovacao.hubusp.server.app.services

import br.usp.inovacao.hubusp.server.app.modules.CompanyForm
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport
import com.google.api.client.json.gson.GsonFactory
import com.google.api.services.sheets.v4.Sheets
import com.google.api.services.sheets.v4.SheetsScopes
import com.google.api.services.sheets.v4.model.ValueRange
import com.google.auth.http.HttpCredentialsAdapter
import com.google.auth.oauth2.GoogleCredentials
import com.typesafe.config.Config
import com.typesafe.config.ConfigFactory
import java.io.IOException

class GoogleSheetsService {

    private val sheetsService: Sheets
    private val config: Config = ConfigFactory.load()

    private val COMPANY_REGISTRATION_SHEET_ID = config.getString("persistence.sheets.company_registration_id")
    private val COMPANY_REGISTRATION_TAB_NAME = config.getString("persistence.sheets.company_registration_tab")

    companion object {
        private const val CREDENTIALS_FILE_PATH = "../credentials.json"
        private const val APPLICATION_NAME = "HubUSP-CompanyRegistration"
    }

    init {
        sheetsService = try {
            val possiblePaths = listOf(
                "../credentials.json",
                "./credentials.json",
                "credentials.json",
                "/hub/credentials.json",
                "/home/gradle/hub/credentials.json"
            )

            val credentialsStream = possiblePaths.firstNotNullOfOrNull { path ->
                val credentialsFile = java.io.File(path)
                if (credentialsFile.exists()) {
                    credentialsFile.inputStream()
                } else {
                    null
                }
            } ?: run {
                GoogleSheetsService::class.java.getResourceAsStream("/credentials.json")
                    ?: GoogleSheetsService::class.java.getResourceAsStream(CREDENTIALS_FILE_PATH)
                    ?: throw IOException("Credentials file not found in any of the expected locations: $possiblePaths or in resources")
            }

            val credentials = GoogleCredentials.fromStream(credentialsStream)
                .createScoped(listOf(SheetsScopes.SPREADSHEETS))

            Sheets.Builder(
                GoogleNetHttpTransport.newTrustedTransport(),
                GsonFactory.getDefaultInstance(),
                HttpCredentialsAdapter(credentials)
            )
                .setApplicationName(APPLICATION_NAME)
                .build()
        } catch (e: Exception) {
            throw RuntimeException("Failed to initialize Google Sheets service: ${e.message}", e)
        }
    }

    fun addCompanyToSheet(companyForm: CompanyForm) {
        try {
            val autoGeneratedIndex = generateCompanyIndex(companyForm.cnpj)
            val companyWithIndex = companyForm.copy(index = autoGeneratedIndex)

            val companyData = createCompanyRow(companyWithIndex)

            val success = addRowToSheet(companyData)
            if (!success) {
                throw RuntimeException("Falha ao adicionar dados na planilha")
            }
        } catch (e: Exception) {
            throw RuntimeException("Erro ao processar dados da empresa: ${e.message}", e)
        }
    }

    private fun generateCompanyIndex(cnpj: String): String {
        val timestamp = System.currentTimeMillis()
        val cnpjSuffix = cnpj.takeLast(4)
        return "EMP-${timestamp}-${cnpjSuffix}"
    }

    private fun addRowToSheet(data: List<String>): Boolean {
        return try {
            val nextRow = findNextEmptyRow()

            if (nextRow == 1) {
                addHeaderRow()
            }

            val range = "'$COMPANY_REGISTRATION_TAB_NAME'!A$nextRow"
            val valueRange = ValueRange()
            valueRange.setValues(listOf(data.map { it as Any }))

            val result = sheetsService.spreadsheets().values()
                .append(COMPANY_REGISTRATION_SHEET_ID, range, valueRange)
                .setValueInputOption("RAW")
                .setInsertDataOption("INSERT_ROWS")
                .execute()

            result.updates?.updatedRows != null && result.updates.updatedRows > 0
        } catch (e: Exception) {
            false
        }
    }

    private fun addHeaderRow(): Boolean {
        return try {
            val headers = listOf(
                "cnpj", "nome_fantasia", "razao_social", "ano_fundacao", "cnae",
                "telefone_comercial", "email_institucional", "endereco", "bairro",
                "cidade", "estado", "cep", "descricao", "produtos_servicos",
                "tecnologias", "logotipo", "site", "incubadora_parque",
                "qual_incubadora", "unicornio", "total_colaboradores", "ods",
                "linkedin", "instagram", "youtube", "facebook", "quer_selo_dna",
                "email_contato_dna", "nome_responsavel_dna", "contrato_dna",
                "informacoes_verdadeiras", "acordos_empresa", "nomes_socios",
                "nusps_socios", "vinculos_socios", "unidades_socios",
                "cargos_socios", "emails_socios", "telefones_socios",
                "total_socios", "tem_socios_usp", "adicionar_mais_socios",
                "funcionarios_clt", "colaboradores_pj", "estagiarios_bolsistas",
                "recebeu_investimento", "tipos_investimento", "valor_proprio",
                "valor_anjo", "valor_venture_capital", "valor_private_equity",
                "valor_pipe", "valor_crowdfunding", "valor_bndes_finep",
                "outros_investimentos", "faturamento_2022",
                "porte_rfb", "somatorio_colaboradores", "tipo_empresa",
                "status_operacional", "indice", "vinculo_incubadora",
                "confirmacao_vinculo_usp", "categoria_dna_usp",
                "confirmacao_vinculo_empresa"
            )

            val range = "'$COMPANY_REGISTRATION_TAB_NAME'!A1"
            val valueRange = ValueRange()
            valueRange.setValues(listOf(headers.map { it as Any }))

            val result = sheetsService.spreadsheets().values()
                .update(COMPANY_REGISTRATION_SHEET_ID, range, valueRange)
                .setValueInputOption("RAW")
                .execute()

            result.updatedRows != null && result.updatedRows > 0
        } catch (e: Exception) {
            false
        }
    }

    private fun findNextEmptyRow(): Int {
        return try {
            val range = "'$COMPANY_REGISTRATION_TAB_NAME'!A:A"
            val response = sheetsService.spreadsheets().values()
                .get(COMPANY_REGISTRATION_SHEET_ID, range)
                .execute()

            val values = response.getValues()
            if (values == null || values.isEmpty()) {
                1
            } else {
                values.size + 1
            }
        } catch (e: Exception) {
            1
        }
    }

    private fun createCompanyRow(companyForm: CompanyForm): List<String> {
        val names: List<String>
        val nusps: List<String>
        val bonds: List<String>
        val unities: List<String>
        val positions: List<String>
        val emails: List<String>
        val phones: List<String>

        if (companyForm.partners != null && companyForm.partners.isNotEmpty()) {
            names = companyForm.partners.map { it.name }
            nusps = companyForm.partners.map { it.nusp ?: "" }
            bonds = companyForm.partners.map { it.bond ?: "" }
            unities = companyForm.partners.map { it.unity ?: "" }
            positions = companyForm.partners.map { it.position ?: "" }
            emails = companyForm.partners.map { it.email ?: "" }
            phones = companyForm.partners.map { it.phone ?: "" }
        } else {
            names = companyForm.partnerNames
            nusps = companyForm.partnerNusps
            bonds = companyForm.partnerBonds
            unities = companyForm.partnerUnities
            positions = companyForm.partnerPositions
            emails = companyForm.partnerEmails
            phones = companyForm.partnerPhones
        }

        val calculatedTotalCollaborators = companyForm.cltEmployees + companyForm.pjCollaborators + companyForm.internsScholars

        val vinculoIncubadora = when {
            companyForm.incubatorBond?.isNotEmpty() == true -> companyForm.incubatorBond
            companyForm.incubated.contains("Sim") -> {
                companyForm.ecosystems.firstOrNull { it.isNotEmpty() } ?: "N達o especificada"
            }
            else -> ""
        }

        return listOf(
            companyForm.cnpj,
            companyForm.name,
            companyForm.corporateName,
            companyForm.year,
            companyForm.cnae,
            companyForm.phones.joinToString(";"),
            companyForm.emails.joinToString(";"),
            companyForm.address.venue,
            companyForm.address.neighborhood,
            companyForm.address.city,
            companyForm.address.state,
            companyForm.address.cep,
            companyForm.description,
            companyForm.services.joinToString(";"),
            companyForm.technologies.joinToString(";"),
            companyForm.logo ?: "",
            companyForm.url ?: "",
            companyForm.incubated,
            companyForm.ecosystems.joinToString(";"),
            if (companyForm.isUnicorn == true) "Sim" else "N達o",
            calculatedTotalCollaborators.toString(),
            companyForm.odss?.joinToString(";") ?: "",
            companyForm.linkedin ?: "",
            companyForm.instagram ?: "",
            companyForm.youtube ?: "",
            companyForm.facebook ?: "",
            if (companyForm.dnaUspWanted) "Sim" else "N達o",
            companyForm.dnaUspContactEmail ?: "",
            companyForm.dnaUspContactName ?: "",
            companyForm.dnaUspContract ?: "",
            if (companyForm.truthfulInformation) "Sim" else "N達o",
            companyForm.agreementOptions.joinToString(";"),
            names.mapIndexed { index: Int, name: String -> "S坦cio ${index + 1}: $name" }.joinToString(";"),
            nusps.mapIndexed { index: Int, nusp: String -> "NUSP S坦cio ${index + 1}: $nusp" }.joinToString(";"),
            bonds.mapIndexed { index: Int, bond: String -> "V鱈nculo S坦cio ${index + 1}: $bond" }.joinToString(";"),
            unities.mapIndexed { index: Int, unity: String -> "Unidade S坦cio ${index + 1}: $unity" }.joinToString(";"),
            positions.mapIndexed { index: Int, position: String -> "Cargo S坦cio ${index + 1}: $position" }.joinToString(";"),
            emails.mapIndexed { index: Int, email: String -> "Email S坦cio ${index + 1}: $email" }.joinToString(";"),
            phones.mapIndexed { index: Int, phone: String -> "Telefone S坦cio ${index + 1}: $phone" }.joinToString(";"),
            companyForm.totalPartners?.toString() ?: names.size.toString(),
            if (companyForm.hasUspPartners == true || nusps.any { it.isNotEmpty() }) "Sim" else "N達o",
            if (companyForm.wantsToAddMorePartners == true) "Sim" else "N達o",
            companyForm.cltEmployees.toString(),
            companyForm.pjCollaborators.toString(),
            companyForm.internsScholars.toString(),
            if (companyForm.hasInvestment) "Sim" else "N達o",
            companyForm.investmentTypes.joinToString(";"),
            formatCurrencyForSpreadsheet(companyForm.ownInvestmentAmount),
            formatCurrencyForSpreadsheet(companyForm.angelInvestmentAmount),
            formatCurrencyForSpreadsheet(companyForm.ventureCapitalAmount),
            formatCurrencyForSpreadsheet(companyForm.privateEquityAmount),
            formatCurrencyForSpreadsheet(companyForm.pipeAmount),
            formatCurrencyForSpreadsheet(companyForm.crowdfundingAmount),
            formatCurrencyForSpreadsheet(companyForm.bndesFinepAmount),
            formatCurrencyForSpreadsheet(companyForm.otherInvestmentsAmount),
            formatCurrencyForSpreadsheet(companyForm.revenue2022),
            companyForm.rfbSize ?: "",
            calculatedTotalCollaborators.toString(),
            companyForm.companyType ?: "",
            companyForm.operationalStatus ?: "",
            calculatedTotalCollaborators.toString(),
            vinculoIncubadora,
            companyForm.uspBondConfirmation ?: "",
            companyForm.uspDnaCategory ?: "",
            companyForm.companyBondConfirmation ?: ""
        )
    }

    private fun formatCurrencyForSpreadsheet(value: String?): String {
        if (value.isNullOrBlank()) return ""

        var cleanValue = value.replace("R$", "").replace(" ", "").trim()

        if (cleanValue.isEmpty()) return ""

        if (cleanValue.contains(",")) {
            val lastCommaIndex = cleanValue.lastIndexOf(",")
            val integerPart = cleanValue.substring(0, lastCommaIndex).replace(".", "")
            val decimalPart = cleanValue.substring(lastCommaIndex + 1)
            cleanValue = "$integerPart.$decimalPart"
        } else {
            cleanValue = cleanValue.replace(".", "")
        }

        cleanValue = cleanValue.replace(Regex("[^0-9.]"), "")

        if (cleanValue.isBlank() || cleanValue == "0" || cleanValue == "0.00") {
            return ""
        }

        return try {
            val numericValue = cleanValue.toDouble()
            if (numericValue == 0.0) {
                ""
            } else {
                String.format("%.2f", numericValue).replace(".", ",")
            }
        } catch (e: NumberFormatException) {
            cleanValue.replace(".", ",")
        }
    }

    private fun formatOtherInvestments(value: String?): String {
        if (value.isNullOrBlank()) return ""

        var cleanValue = value.replace("R$", "").trim()

        cleanValue = cleanValue.replace(Regex("[^0-9.,]"), "")

        if (cleanValue.contains(",")) {
            val lastCommaIndex = cleanValue.lastIndexOf(",")
            val integerPart = cleanValue.substring(0, lastCommaIndex).replace(".", "")
            val decimalPart = cleanValue.substring(lastCommaIndex + 1)
            cleanValue = "$integerPart.$decimalPart"
        } else {
            cleanValue = cleanValue.replace(".", "")
        }

        return if (cleanValue.isBlank() || cleanValue == "0" || cleanValue == "0.00") {
            ""
        } else {
            try {
                val numericValue = cleanValue.toDouble()
                if (numericValue == 0.0) {
                    ""
                } else {
                    String.format("%.2f", numericValue).replace(".", ",")
                }
            } catch (e: NumberFormatException) {
                ""
            }
        }
    }
}
